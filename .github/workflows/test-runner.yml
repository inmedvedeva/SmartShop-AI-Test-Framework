name: SmartShop AI Test Framework

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run cleanup every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - ui
        - api
        - unit
        - performance
        - mobile

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]
        browser: [chrome, firefox]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Playwright browsers
      run: |
        playwright install
        playwright install-deps

    - name: Install Chrome dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install Firefox dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y firefox

    - name: Set up environment variables
      run: |
        echo "BASE_URL=https://automationexercise.com" >> $GITHUB_ENV
        echo "API_BASE_URL=https://automationexercise.com/api" >> $GITHUB_ENV
        echo "HEADLESS=true" >> $GITHUB_ENV
        echo "BROWSER=${{ matrix.browser }}" >> $GITHUB_ENV
        echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Start Xvfb
      run: |
        sudo Xvfb -ac :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &

    - name: Create reports directory
      run: mkdir -p reports/allure-results reports/html reports/screenshots

    - name: Run basic tests
      run: |
        pytest tests/test_basic.py \
          --alluredir=./reports/allure-results \
          --html=./reports/html/basic_test_report.html \
          --self-contained-html \
          -v \
          --tb=short

    - name: Run UI tests
      if: github.event.inputs.test_type == 'ui' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      run: |
        pytest tests/ui/ \
          --browser=${{ matrix.browser }} \
          --alluredir=./reports/allure-results \
          --html=./reports/html/ui_test_report.html \
          --self-contained-html \
          -v \
          --tb=short
      env:
        BROWSER: ${{ matrix.browser }}

    - name: Run API tests
      if: github.event.inputs.test_type == 'api' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      run: |
        pytest tests/api/ \
          --alluredir=./reports/allure-results \
          --html=./reports/html/api_test_report.html \
          --self-contained-html \
          -v \
          --tb=short

    - name: Run unit tests
      if: github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      run: |
        pytest tests/unit/ \
          --alluredir=./reports/allure-results \
          --html=./reports/html/unit_test_report.html \
          --self-contained-html \
          -v \
          --tb=short

    - name: Run performance tests
      if: github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      run: |
        pytest tests/performance/ \
          --alluredir=./reports/allure-results \
          --html=./reports/html/performance_test_report.html \
          --self-contained-html \
          -v \
          --tb=short

    - name: Run mobile tests
      if: github.event.inputs.test_type == 'mobile' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      run: |
        python scripts/run_mobile_tests.py --cross-device --browser chromium
        pytest tests/mobile/ \
          --alluredir=./reports/allure-results \
          --html=./reports/html/mobile_test_report.html \
          --self-contained-html \
          -v \
          --tb=short \
          --device IPHONE_12 \
          --browser chromium
      env:
        BROWSER: chromium

    - name: Generate Allure report
      if: always()
      run: |
        allure generate ./reports/allure-results --clean -o ./reports/allure-report

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.browser }}-${{ github.run_number }}
        path: |
          reports/
          screenshots/
          retention-days: 7
          if-no-files-found: warn

    - name: Upload Allure report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report-${{ matrix.browser }}-${{ github.run_number }}
        path: reports/allure-report/
        retention-days: 30

    - name: Deploy Allure Report to GitHub Pages
      if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./reports/allure-report
        destination_dir: allure-reports
        force_orphan: true

    - name: Comment PR with Test Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          let comment = '## 🧪 Test Results\n\n';

          // Add test summary
          if (fs.existsSync('reports/allure-results/executor.json')) {
            const executor = JSON.parse(fs.readFileSync('reports/allure-results/executor.json', 'utf8'));
            comment += `**Test Execution:** ${executor.name}\n`;
            comment += `**Build:** ${executor.buildName}\n\n`;
          }

          // Add test statistics
          if (fs.existsSync('reports/allure-results/widgets/summary.json')) {
            const summary = JSON.parse(fs.readFileSync('reports/allure-results/widgets/summary.json', 'utf8'));
            comment += `**Results:**\n`;
            comment += `- ✅ Passed: ${summary.statistic.passed}\n`;
            comment += `- ❌ Failed: ${summary.statistic.failed}\n`;
            comment += `- ⚠️ Broken: ${summary.statistic.broken}\n`;
            comment += `- 🔄 Skipped: ${summary.statistic.skipped}\n\n`;
          }

          comment += `📊 [View Full Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/allure-reports/)\n`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Test results summary
      if: always()
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Browser:** ${{ matrix.browser }}" >> $GITHUB_STEP_SUMMARY
        echo "**Python Version:** ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Reports Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- Allure Report: Available as artifact" >> $GITHUB_STEP_SUMMARY
        echo "- HTML Reports: Available as artifact" >> $GITHUB_STEP_SUMMARY
        echo "- Screenshots: Available as artifact" >> $GITHUB_STEP_SUMMARY

  notify:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true

      - name: Parse test results
        id: parse_results
        run: |
          # Count test results
          if [ -f "reports/allure-results/executor.json" ]; then
            echo "Test execution completed"
            echo "status=completed" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        run: |
          echo "🧪 SmartShop AI Test Framework - Test execution completed"
          echo "Status: ${{ steps.parse_results.outputs.status }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Run security scan
        run: |
          echo "Running security scan..."
          pip install bandit safety
          bandit -r . -f json -o reports/security-scan.json || true
          safety check --json --output reports/safety-scan.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: reports/security-scan.json reports/safety-scan.json
          retention-days: 90

  code-quality:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        pip install flake8 black isort mypy
        pip install -r requirements.txt

    - name: Run code formatting check
      run: |
        black --check --diff .
        isort --check-only --diff .

    - name: Run linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking
      run: |
        mypy . --ignore-missing-imports --no-strict-optional

  dependency-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Check for outdated dependencies
      run: |
        pip install pipdeptree
        pipdeptree --warn silence
        echo "Dependency tree generated"

    - name: Check for security vulnerabilities
      run: |
        pip install safety
        safety check --full-report

  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run cleanup
        run: python scripts/cleanup_reports.py --days 7

      - name: Report cleanup results
        run: |
          echo "🧹 Weekly cleanup completed"
          echo "Reports older than 7 days have been removed"
          echo "Repository size optimized"
