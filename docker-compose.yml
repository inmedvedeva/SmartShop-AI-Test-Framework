version: '3.8'

services:
  # Test web application (demo)
  smartshop-app:
    image: nginx:alpine
    container_name: smartshop-app
    ports:
      - "8080:80"
    volumes:
      - ./data/demo-app:/usr/share/nginx/html
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API server (demo)
  smartshop-api:
    image: python:3.12-alpine
    container_name: smartshop-api
    ports:
      - "8000:8000"
    volumes:
      - ./data/api:/app
    working_dir: /app
    command: >
      sh -c "pip install fastapi uvicorn &&
             uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres:5432/smartshop_test
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: smartshop-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: smartshop_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d smartshop_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: smartshop-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Selenium Grid for parallel testing
  selenium-hub:
    image: selenium/hub:4.15.0
    container_name: selenium-hub
    ports:
      - "4442:4442"
      - "4443:4443"
      - "4444:4444"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chrome browser for Selenium
  chrome:
    image: selenium/node-chrome:4.15.0
    container_name: selenium-chrome
    shm_size: 2gb
    depends_on:
      selenium-hub:
        condition: service_healthy
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=4
      - SE_NODE_OVERRIDE_MAX_SESSIONS=true
    networks:
      - test-network

  # Firefox browser for Selenium
  firefox:
    image: selenium/node-firefox:4.15.0
    container_name: selenium-firefox
    shm_size: 2gb
    depends_on:
      selenium-hub:
        condition: service_healthy
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=4
      - SE_NODE_OVERRIDE_MAX_SESSIONS=true
    networks:
      - test-network

  # Test container for running tests
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: smartshop-test-runner
    volumes:
      - ./reports:/app/reports
      - ./screenshots:/app/screenshots
    environment:
      - BASE_URL=http://smartshop-app:80
      - API_BASE_URL=http://smartshop-api:8000
      - SELENIUM_HUB_URL=http://selenium-hub:4444/wd/hub
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=smartshop_test
      - DB_USER=test_user
      - DB_PASSWORD=test_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      smartshop-app:
        condition: service_healthy
      smartshop-api:
        condition: service_healthy
      postgres:
        condition: service_healthy
      selenium-hub:
        condition: service_healthy
    networks:
      - test-network
    profiles:
      - test

  # Allure server for reports
  allure:
    image: frankescobar/allure-docker-service
    container_name: allure-server
    ports:
      - "5050:5050"
    volumes:
      - ./reports/allure-results:/app/allure-results
      - ./reports/allure-report:/app/default-reports-portal
    environment:
      CHECK_RESULTS_EVERY_SECONDS: 1
      KEEP_HISTORY: 1
    networks:
      - test-network
    profiles:
      - reports

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: smartshop-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./data/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./data/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - test-network
    profiles:
      - monitoring

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: smartshop-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./data/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - test-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  test-network:
    driver: bridge
