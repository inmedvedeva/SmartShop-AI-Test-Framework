#!/bin/bash

# SmartShop AI Test Framework - Test Runner Script
# –ê–≤—Ç–æ—Ä: Automation QA Engineer
# –í–µ—Ä—Å–∏—è: 1.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_message() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "SmartShop AI Test Framework - Test Runner"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -t, --test-type TYPE     –¢–∏–ø —Ç–µ—Å—Ç–æ–≤ (ui, api, performance, visual, all)"
    echo "  -b, --browser BROWSER    –ë—Ä–∞—É–∑–µ—Ä –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤ (chrome, firefox, edge)"
    echo "  -p, --parallel           –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
    echo "  -r, --rerun              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
    echo "  -m, --markers MARKERS    –ú–∞—Ä–∫–µ—Ä—ã pytest –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"
    echo "  -o, --output FORMAT      –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ (html, allure, json)"
    echo "  -v, --verbose            –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    echo "  -h, --help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 -t ui -b chrome                    # UI —Ç–µ—Å—Ç—ã –≤ Chrome"
    echo "  $0 -t api                             # API —Ç–µ—Å—Ç—ã"
    echo "  $0 -t all -p -r 2                     # –í—Å–µ —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å 2 –ø–æ–≤—Ç–æ—Ä–∞–º–∏"
    echo "  $0 -m smoke -o allure                 # –î—ã–º–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å Allure –æ—Ç—á–µ—Ç–æ–º"
    echo ""
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TEST_TYPE="all"
BROWSER="chrome"
PARALLEL=false
RERUN=0
MARKERS=""
OUTPUT_FORMAT="html"
VERBOSE=false

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--test-type)
            TEST_TYPE="$2"
            shift 2
            ;;
        -b|--browser)
            BROWSER="$2"
            shift 2
            ;;
        -p|--parallel)
            PARALLEL=true
            shift
            ;;
        -r|--rerun)
            RERUN="$2"
            shift 2
            ;;
        -m|--markers)
            MARKERS="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_FORMAT="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_venv() {
    if [[ "$VIRTUAL_ENV" == "" ]]; then
        print_warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
        if [ -d "venv" ]; then
            print_message "–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
            source venv/bin/activate
        else
            print_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: python -m venv venv"
            exit 1
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_message "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."

    if ! command -v python &> /dev/null; then
        print_error "Python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi

    if ! python -c "import pytest" &> /dev/null; then
        print_error "pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt"
        exit 1
    fi

    if ! python -c "import selenium" &> /dev/null; then
        print_error "selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi

    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
create_report_dirs() {
    print_message "–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤..."

    mkdir -p reports/allure-results
    mkdir -p reports/html
    mkdir -p reports/screenshots
    mkdir -p reports/json

    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    print_message "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

    export BROWSER=$BROWSER
    export HEADLESS=true

    if [ "$VERBOSE" = true ]; then
        export PYTEST_ADDOPTS="-v -s"
    fi

    print_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã pytest
build_pytest_command() {
    local cmd="pytest"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–∞–º
    case $TEST_TYPE in
        "ui")
            cmd="$cmd tests/ui/"
            ;;
        "api")
            cmd="$cmd tests/api/"
            ;;
        "performance")
            cmd="$cmd tests/performance/"
            ;;
        "visual")
            cmd="$cmd tests/ui/ -m visual"
            ;;
        "all")
            cmd="$cmd tests/"
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: $TEST_TYPE"
            exit 1
            ;;
    esac

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if [ ! -z "$MARKERS" ]; then
        cmd="$cmd -m $MARKERS"
    fi

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if [ "$PARALLEL" = true ]; then
        cmd="$cmd -n auto"
    fi

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏
    if [ "$RERUN" -gt 0 ]; then
        cmd="$cmd --reruns $RERUN --reruns-delay 1"
    fi

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç—á–µ—Ç–æ–≤
    case $OUTPUT_FORMAT in
        "html")
            cmd="$cmd --html=reports/html/test_report.html --self-contained-html"
            ;;
        "allure")
            cmd="$cmd --alluredir=reports/allure-results"
            ;;
        "json")
            cmd="$cmd --json-report --json-report-file=reports/json/test_report.json"
            ;;
        "all")
            cmd="$cmd --html=reports/html/test_report.html --self-contained-html --alluredir=reports/allure-results --json-report --json-report-file=reports/json/test_report.json"
            ;;
    esac

    echo "$cmd"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    local cmd=$(build_pytest_command)

    print_message "–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã..."
    print_message "–ö–æ–º–∞–Ω–¥–∞: $cmd"
    echo ""

    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    local start_time=$(date +%s)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    if eval $cmd; then
        local end_time=$(date +%s)
        local duration=$((end_time - start_time))

        print_success "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–∞—Ö
        show_report_info

    else
        local end_time=$(date +%s)
        local duration=$((end_time - start_time))

        print_error "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏ –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–∞—Ö –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        show_report_info

        exit 1
    fi
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç—á–µ—Ç–∞—Ö
show_report_info() {
    echo ""
    print_message "–û—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:"

    if [ -f "reports/html/test_report.html" ]; then
        echo "  üìä HTML –æ—Ç—á–µ—Ç: reports/html/test_report.html"
    fi

    if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
        echo "  üìà Allure —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: reports/allure-results/"
        echo "  üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Allure –æ—Ç—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: allure serve reports/allure-results"
    fi

    if [ -f "reports/json/test_report.json" ]; then
        echo "  üìã JSON –æ—Ç—á–µ—Ç: reports/json/test_report.json"
    fi

    if [ -d "reports/screenshots" ] && [ "$(ls -A reports/screenshots)" ]; then
        echo "  üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: reports/screenshots/"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
cleanup_old_reports() {
    print_message "–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã..."

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ HTML –æ—Ç—á–µ—Ç—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
    find reports/html -name "*.html" -mtime +7 -delete 2>/dev/null || true

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (—Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π)
    find reports/screenshots -name "*.png" -mtime +3 -delete 2>/dev/null || true

    print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üß™ SmartShop AI Test Framework"
    echo "================================"
    echo ""

    print_message "–¢–∏–ø —Ç–µ—Å—Ç–æ–≤: $TEST_TYPE"
    print_message "–ë—Ä–∞—É–∑–µ—Ä: $BROWSER"
    print_message "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: $PARALLEL"
    print_message "–ü–æ–≤—Ç–æ—Ä—ã: $RERUN"
    print_message "–ú–∞—Ä–∫–µ—Ä—ã: $MARKERS"
    print_message "–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: $OUTPUT_FORMAT"
    print_message "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥: $VERBOSE"
    echo ""

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    check_venv
    check_dependencies
    create_report_dirs
    setup_environment
    cleanup_old_reports

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    run_tests

    print_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
